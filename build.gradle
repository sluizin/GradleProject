/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'Administrator' at '17-1-22 上午10:01' with Gradle 2.14.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.14.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
import org.gradle.plugins.ide.eclipse.model.Facet
buildscript {
	  repositories {
	  //jcenter()
		mavenLocal()
	    maven {
	      url "https://plugins.gradle.org/m2/"
	    }
	 }
	  dependencies {
	  //files('C:/Program Files/Java/jdk1.8.0_101/lib/gradle-tomcat-plugin-2.2.4.jar')
	  classpath "com.bmuschko:gradle-tomcat-plugin:2.2.4"
	  }
}
allprojects {  
	apply plugin: 'java'
	apply plugin: 'maven'
	apply plugin: 'eclipse'
	apply plugin: 'war'
	apply plugin: 'eclipse-wtp'
	version = '1.0'  
	sourceCompatibility = 1.8   // 设置 JDK 版本
	targetCompatibility = 1.8
}  


def env = System.getProperty("env") ?: "dev"
apply from: "profile-${env}.gradle"

apply from:"common/config.gradle"
apply plugin: 'com.bmuschko.tomcat'

webAppDirName = 'WebContent'    // 设置 WebApp 根目录
//sourceSets.main.java.srcDir 'src'   // 设置 Java 源码所在目录
jar {
	manifest {
		attributes 'Implementation-Title': 'Gradle Quickstart', 'Implementation-Version': version
	}
}

/*
通过config.groovy文件设置 开发环境
参数：-Pprofile=dev

占位
jdbc.url=@jdbc.url@

使用
${profile} == dev/test/online

以下设置
ext {
    profile = project['profile']
}
 
def loadGroovy(){
    def configFile = file('common/config.groovy')
    new ConfigSlurper(profile).parse(configFile.toURL()).toProperties()
}
*/

dependencies {   
    //testCompile group: 'junit', name: 'junit', version: '4.11'
    def tomcatVersion = '7.0.37' 
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",  
           "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}",  
           "org.apache.tomcat:tomcat-jasper:${tomcatVersion}"  
 }
tomcat {
    httpPort = 8080
    httpsPort = 8091
    enableSSL = true
}
repositories {
	mavenLocal() 
}

dependencies {  
    tasks.withType(JavaCompile) {  
        options.encoding = "UTF-8"  
    }  
    //compile fileTree(dir: 'WebContent/WEB-INF/lib', include: ['*.jar'])
    // 没有网络的时候用这个
    //compileOnly files('C:/java/tomcat/apache-tomcat-6.0.37/lib/servlet-api.jar')
    // 有网络是用maven
    providedCompile 'javax.servlet:servlet-api:2.5' //编译期
}  


sourceSets {
    main {
        resources {
            srcDirs =["src/main/resources/public","src/main/resources/$env"]
        }
    }
}
sourceSets {
    main {
        resources {
            exclude 'src/main/resources/$env/cas/'
            exclude '**cas/*'
			exclude '**/cas/*'
        }
    }
}
/*
war {
    copyAction.exclude 'WEB-INF/web.xml'
    webInf {
        from('src/main/resources/$env/cas/web.xml')
    }
}*/
war {
    from("src/main/resources/$env/cas/web.xml") {  
        include "*"  
        into("WEB-INF")  
    }  
    //from 'src/main/resources/$env/cas/web.xml' // adds a file-set to the root of the archive  default src/main/webapp
    //webInf {from 'src/main/resources/$env/cas/'} // adds a file-set to the WEB-INF dir.
    //classpath fileTree( 'additionalLibs') // adds a file-set to the WEB-INF/lib dir
    //webXml = file( 'src/main/resources/$env/cas/web.xml')// copies a file to WEB-INF/web.xml
}

task tomcatDebug {
   // Create a new task tomcatDebug, add a description and add it to the same group as tomcatRun
   description "Starting Tomcat with debugger enabled on port 8787."
   group "web application"
} << {
 
   org.gradle.tooling.ProjectConnection conn = org.gradle.tooling.GradleConnector.newConnector()
      .forProjectDirectory(new File("."))
      .connect();
 
   try {
 
      org.gradle.tooling.model.build.BuildEnvironment envTask = conn.getModel(org.gradle.tooling.model.build.BuildEnvironment.class)
      org.gradle.tooling.BuildLauncher build = conn.newBuild();
  
      //build.forTasks("tomcatRunWar")
      // Enable debug via jvm arguments and append JVM arguments of the currently running vm (except -D).
      build.setJvmArguments("-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8899", *envTask.java.jvmArguments)
 
      // Run tomcatRun in the new JVM with debug parameters
      build.run()
 
   } finally {
      conn.close();
   }
}

tomcatRun.contextPath = '/GradleProject'
tomcatRunWar.contextPath = '/GradleProject'
